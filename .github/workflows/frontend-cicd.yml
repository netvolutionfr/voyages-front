name: Frontend CI-CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint & Test
        run: |
          npm run lint --if-present
          npm test --if-present -- --ci
        continue-on-error: true

      - name: Build (CI)
        run: npm run build
        env:
          VITE_API_BASE: ${{ vars.VITE_API_BASE }}
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_KEYCLOAK_URL: ${{ vars.VITE_KEYCLOAK_URL }}
          VITE_KEYCLOAK_REALM: ${{ vars.VITE_KEYCLOAK_REALM }}
          VITE_KEYCLOAK_CLIENT_ID: ${{ vars.VITE_KEYCLOAK_CLIENT_ID }}
          VITE_FILES_BASE: ${{ vars.VITE_FILES_BASE }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,priority=800
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            set -euo pipefail

            # 0) Contexte & tags
            echo "GITHUB_SHA=${GITHUB_SHA}"
            IMAGE="ghcr.io/netvolutionfr/voyages-front"
            TAG="${GITHUB_SHA}"

            # 1) Vérifier que l'image existe sur GHCR (côté CI)
            echo "CI: image that should exist: ${IMAGE}:${TAG}"

            # 2) Server: se placer dans le bon dossier et afficher l'état
            cd "$HOME/front" || { echo "No ~/front"; exit 1; }
            echo "== docker compose version =="
            docker compose version || docker-compose version

            echo "== compose config (résolu) =="
            FRONT_TAG="${TAG}" docker compose config

            echo "== images/containers avant =="
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}' | sed 's/^/  /'
            docker images | grep -E "$(echo ${IMAGE} | sed 's/\//\\\//g')" || true

            # 3) Pull explicite du tag
            echo "== pull ${IMAGE}:${TAG} =="
            docker pull "${IMAGE}:${TAG}"

            # 4) Lancement: forcer le tag à cette exécution
            echo "== up -d (front) avec FRONT_TAG=${TAG} =="
            FRONT_TAG="${TAG}" docker compose up -d --no-deps --pull always front

            # 5) Vérifications
            echo "== ps après =="
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}' | sed 's/^/  /'

            echo "== logs récents du conteneur =="
            docker logs --tail=80 voyages-front || true

            # 6) Healthcheck HTTP
            echo "== check /health =="
            curl -fsS http://127.0.0.1:8081/health && echo "health: OK"
